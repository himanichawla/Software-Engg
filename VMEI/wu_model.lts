const False = 0
const True = 1

range Bool = 0..1

range Cars = 1..4

range Lanes = 1..1
/*
        qz1   x

    x   cz1  cz2   qz2

   qz4  cz3  cz4   x

         x  qz3

*/

/*

For HILIST and LOWLIST I am using boolean flags: 3 for HILIST and 3 for LOWLIST. True means that a
specific car is in one of the lists. Assumes I know there are 4 cars and I know their IDs. Wu does *not*
make these assumptions.

Note 1: I will have to write 4 separate WU_CAR processes for 1,2,3,4. Probably can generalize at some point.
Maybe using ID as process var and then mod operator for other car ids? Will make WAIT_RESPONSE more complicated
with nested ifs to sort out priority. I avoid this because I know car 1 is lower than everyone else.

Note 2: Treating whole grid as one non-sharable resource. Not efficient.

Note 3. I am using car id as priority. Wu uses a clock. Low id cars could get locked out under my scheme. You can
use stress testing ala the warring neighbors to show this.

Note 4. You can use stress testing to make sure time_out is long enough - make it low priority.

Note 5. I find it useful to model like this to try to sort out what Wu is proposing. No guarentees that I
have concordance :)

*/

//TEST CAR
BROADCAST_TEST(ID=0) = (choose_lane[ID][l:Lanes]->RUN[0][0][l]),
RUN[s1:Bool][r1:Bool][l:Lanes] = (
	when(!s1) receive_request[ID][(ID+1)%2][l] -> RUN[True][s2][s3][r1][r2][r3][l] |
	receive_permission[(ID+1)%2][ID] -> RUN[s1][s2][s3][True][r2][r3][l] |
	when(!r1) receive_reject[(ID+1)%2][ID] -> RUN[s1][s2][s3][True][r2][r3][l] |
	when(s1 && r1) done_broadcast[ID]->RUN[1][1][l] |
    restarting[ID]->BROADCAST_TEST
).

WU_CAR_0_TEST = STARTUP,

STARTUP = (choose_lane[0][l:Lanes] -> WAIT_RESPONSE[0][0][0][0][0][0][l] |
		   receive_request[1][0][Lanes] -> send_permission[0][1] -> STARTUP),

WAIT_RESPONSE[hl1:Bool][ll1:Bool][l:Lanes] = (
			receive_request[1][0][Lanes] -> send_permission[0][2] -> WAIT_RESPONSE[True][hl2][hl3][ll1][ll2][ll3][l] |
			receive_request[2][0][Lanes] -> send_permission[0][3] -> WAIT_RESPONSE[hl1][True][hl3][ll1][ll2][ll3][l] |
			receive_request[3][0][Lanes] -> send_permission[0][4] -> WAIT_RESPONSE[hl1][hl2][True][ll1][ll2][ll3][l] |
			send_request[0][1][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			send_request[0][2][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			send_request[0][3][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			receive_permission[1][0] -> WAIT_RESPONSE[False][hl2][hl3][ll1][ll2][ll3][l] |
			receive_permission[2][0] -> WAIT_RESPONSE[hl1][False][hl3][ll1][ll2][ll3][l] |
			receive_permission[3][0] -> WAIT_RESPONSE[hl1][hl2][False][ll1][ll2][ll3][l] |
			receive_reject[1][0] -> WAIT_RESPONSE[True][hl2][hl3][ll1][ll2][ll3][l] |
			receive_reject[2][0] -> WAIT_RESPONSE[hl1][True][hl3][ll1][ll2][ll3][l] |
			receive_reject[3][0] -> WAIT_RESPONSE[hl1][hl2][True][ll1][ll2][ll3][l] |

			done_broadcast[0] -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][ll3][l]),

WAIT_PERMISSION[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
			when(!hl1 && !hl2 && !hl3) enter[0] -> CRITICAL[ll1][ll2][ll3][l] |
			when(hl1) receive_permission[1][0] -> WAIT_PERMISSION[False][hl2][hl3][ll1][ll2][ll3][l] |
			when(hl2) receive_permission[2][0] -> WAIT_PERMISSION[hl1][False][hl3][ll1][ll2][ll3][l] |
			when(hl3) receive_permission[3][0] -> WAIT_PERMISSION[hl1][hl2][False][ll1][ll2][ll3][l] |
			receive_request[1][0][Lanes] -> send_reject[0][1] -> WAIT_PERMISSION[hl1][hl2][hl3][True][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_reject[0][2] -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][True][ll3][l] |
			receive_request[3][0][Lanes] -> send_reject[0][3] -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][True][l] 
		),
CRITICAL[ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
		 	exit[0] -> CLEANUP[ll1][ll2][ll3][l] |
			//go_slow[0] -> CRITICAL[ll1][ll2][ll3][l] |

			receive_request[1][0][Lanes] -> send_reject[0][1] -> CRITICAL[True][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_reject[0][2] -> CRITICAL[ll1][True][ll3][l] |
			receive_request[3][0][Lanes] -> send_reject[0][3] -> CRITICAL[ll1][ll2][True][l] 
		),
CLEANUP[ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
			when(!ll1 && !ll2 && !ll3) restarting[0] -> STARTUP |
			when(ll1) send_permission[0][1] -> CLEANUP[False][ll2][ll3][l] |
			when(ll2) send_permission[0][2] -> CLEANUP[ll1][False][ll3][l] |
			when(ll3) send_permission[0][3] -> CLEANUP[ll1][ll2][False][l] |
			receive_request[1][0][Lanes] -> send_permission[0][1] -> CRITICAL[True][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_permission[0][2] -> CRITICAL[ll1][True][ll3][l] |
			receive_request[3][0][Lanes] -> send_permission[0][3] -> CRITICAL[ll1][ll2][True][l] 
		).

//

BROADCAST(ID=0) = (choose_lane[ID][l:Lanes]->RUN[0][0][0][0][0][0][l]),
RUN[s1:Bool][s2:Bool][s3:Bool][r1:Bool][r2:Bool][r3:Bool][l:Lanes] = (
	when(!s1) send_request[ID][(ID+1)%4][l] -> RUN[True][s2][s3][r1][r2][r3][l] |
	when(!s2) send_request[ID][(ID+2)%4][l] -> RUN[s1][True][s3][r1][r2][r3][l] |
	when(!s3) send_request[ID][(ID+3)%4][l] -> RUN[s1][s2][True][r1][r2][r3][l] |
	receive_permission[(ID+1)%4][ID] -> RUN[s1][s2][s3][True][r2][r3][l] |
	when(!r1) receive_reject[(ID+1)%4][ID] -> RUN[s1][s2][s3][True][r2][r3][l] |
	receive_permission[(ID+2)%4][ID] -> RUN[s1][s2][s3][r1][True][r3][l] |
	when(!r2) receive_reject[(ID+2)%4][ID] -> RUN[s1][s2][s3][r1][True][r3][l] |
	receive_permission[(ID+3)%4][ID] -> RUN[s1][s2][s3][r1][r2][True][l] |
	when(!r3) receive_reject[(ID+3)%4][ID] -> RUN[s1][s2][s3][r1][r2][True][l] |
	when(s1 && s2 && s3 && r1 && r2 && r3) done_broadcast[ID]->RUN[1][1][1][1][1][1][l] |
    restarting[ID]->BROADCAST
).

WU_CAR_0 = STARTUP,

STARTUP = (choose_lane[0][l:Lanes] -> WAIT_RESPONSE[1][1][1][0][0][0][l] |
		   receive_request[1][0][Lanes] -> send_permission[0][1] -> STARTUP |
		   receive_request[2][0][Lanes] -> send_permission[0][2] -> STARTUP |
		   receive_request[3][0][Lanes] -> send_permission[0][3] -> STARTUP),

WAIT_RESPONSE[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
			receive_request[1][0][Lanes] -> if hl1 then (send_permission[0][1] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l]) 
											else (send_reject[0][1] -> WAIT_RESPONSE[hl1][hl2][hl3][True][ll2][ll3][l]) |
			receive_request[2][0][Lanes] -> if hl2 then (send_permission[0][2] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l]) 
											else (send_reject[0][2] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][True][ll3][l]) |
			receive_request[3][0][Lanes] -> if hl3 then (send_permission[0][3] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l]) 
											else (send_reject[0][3] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][True][l]) |
			send_request[0][1][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			send_request[0][2][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			send_request[0][3][l] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			receive_permission[1][0] -> WAIT_RESPONSE[False][hl2][hl3][ll1][ll2][ll3][l] |
			receive_permission[2][0] -> WAIT_RESPONSE[hl1][False][hl3][ll1][ll2][ll3][l] |
			receive_permission[3][0] -> WAIT_RESPONSE[hl1][hl2][False][ll1][ll2][ll3][l] |
			receive_reject[1][0] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			receive_reject[2][0] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |
			receive_reject[3][0] -> WAIT_RESPONSE[hl1][hl2][hl3][ll1][ll2][ll3][l] |

			done_broadcast[0] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][ll2][ll3][l]),

WAIT_FOR_EVERYONE[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
	receive_request[1][0][Lanes] -> send_reject[0][1] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][True][ll2][ll3][l] |
	receive_request[2][0][Lanes] -> send_reject[0][2] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][True][ll3][l] |
	receive_request[3][0][Lanes] -> send_reject[0][3] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][ll2][True][l] |
	sync -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][ll3][l]
),
WAIT_PERMISSION[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
			when(!hl1 && !hl2 && !hl3) enter[0] -> CRITICAL[ll1][ll2][ll3][l] |
			when(hl1) receive_permission[1][0] -> WAIT_PERMISSION[False][hl2][hl3][ll1][ll2][ll3][l] |
			when(hl2) receive_permission[2][0] -> WAIT_PERMISSION[hl1][False][hl3][ll1][ll2][ll3][l] |
			when(hl3) receive_permission[3][0] -> WAIT_PERMISSION[hl1][hl2][False][ll1][ll2][ll3][l] |
			receive_request[1][0][Lanes] -> send_reject[0][1] -> WAIT_PERMISSION[hl1][hl2][hl3][True][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_reject[0][2] -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][True][ll3][l] |
			receive_request[3][0][Lanes] -> send_reject[0][3] -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][True][l] 
		),
CRITICAL[ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
		 	exit[0] -> CLEANUP[ll1][ll2][ll3][l] |
			//go_slow[0] -> CRITICAL[ll1][ll2][ll3][l] |

			receive_request[1][0][Lanes] -> send_reject[0][1] -> CRITICAL[True][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_reject[0][2] -> CRITICAL[ll1][True][ll3][l] |
			receive_request[3][0][Lanes] -> send_reject[0][3] -> CRITICAL[ll1][ll2][True][l] 
		),
CLEANUP[ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
			when(!ll1 && !ll2 && !ll3) restarting[0] -> STARTUP |
			when(ll1) send_permission[0][1] -> CLEANUP[False][ll2][ll3][l] |
			when(ll2) send_permission[0][2] -> CLEANUP[ll1][False][ll3][l] |
			when(ll3) send_permission[0][3] -> CLEANUP[ll1][ll2][False][l] |
			receive_request[1][0][Lanes] -> send_permission[0][1] -> CLEANUP[ll1][ll2][ll3][l] |  //put on LOWLIST
			receive_request[2][0][Lanes] -> send_permission[0][2] -> CLEANUP[ll1][ll2][ll3][l] |
			receive_request[3][0][Lanes] -> send_permission[0][3] -> CLEANUP[ll1][ll2][ll3][l] 
		).

WU_CAR_1 = STARTUP,

STARTUP = (choose_lane[1][l:Lanes] -> WAIT_RESPONSE[1][1][1][0][0][0][l] | //HILIST and LOWLIST
		   receive_request[0][1][Lanes] -> send_permission[1][0] -> STARTUP |
		   receive_request[2][1][Lanes] -> send_permission[1][2] -> STARTUP |
		   receive_request[3][1][Lanes] -> send_permission[1][3] -> STARTUP), 

WAIT_RESPONSE[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			receive_request[0][1][Lanes] -> send_reject[1][0] -> WAIT_RESPONSE[hl2][hl3][hl4][True][ll3][ll4][l] |
			receive_request[2][1][Lanes] -> if hl3 then (send_permission[1][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l])
											else (send_reject[1][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][True][ll4][l]) |
			receive_request[3][1][Lanes] -> if hl4 then (send_permission[1][3] -> WAIT_RESPONSE[hl2][hl3][True][ll2][ll3][ll4][l])
											else (send_reject[1][3] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][True][l]) |
			send_request[1][0][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[1][2][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[1][3][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[0][1] -> WAIT_RESPONSE[False][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[2][1] -> WAIT_RESPONSE[hl2][False][hl4][ll2][ll3][ll4][l] |
			receive_permission[3][1] -> WAIT_RESPONSE[hl2][hl3][False][ll2][ll3][ll4][l] |
			receive_reject[0][1] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[2][1] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[3][1] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |

			done_broadcast[1] -> WAIT_FOR_EVERYONE[hl2][hl3][hl4][ll2][ll3][ll4][l]
		),
WAIT_FOR_EVERYONE[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
	receive_request[0][1][Lanes] -> send_reject[1][0] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][True][ll2][ll3][l] |
	receive_request[2][1][Lanes] -> send_reject[1][2] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][True][ll3][l] |
	receive_request[3][1][Lanes] -> send_reject[1][3] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][ll2][True][l] |
	sync -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][ll3][l]
),
WAIT_PERMISSION[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!hl2 && !hl3 && !hl4) enter[1] -> CRITICAL[ll2][ll3][ll4][l] |
			when(hl2) receive_permission[0][1] -> WAIT_PERMISSION[False][hl3][hl4][ll2][ll3][ll4][l] |
			when(hl3) receive_permission[2][1] -> WAIT_PERMISSION[hl2][False][hl4][ll2][ll3][ll4][l] |
			when(hl4) receive_permission[3][1] -> WAIT_PERMISSION[hl2][hl3][False][ll2][ll3][ll4][l] |

			receive_request[0][1][Lanes] -> send_reject[1][0] -> WAIT_PERMISSION[hl2][hl3][hl4][True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[2][1][Lanes] -> send_reject[1][2] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][True][ll4][l] |
			receive_request[3][1][Lanes] -> send_reject[1][3] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][ll3][True][l] 
		),
CRITICAL[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
		 	exit[1] -> CLEANUP[ll2][ll3][ll4][l] |
			//go_slow[1] -> CRITICAL[ll2][ll3][ll4][l] |

			receive_request[0][1][Lanes] -> send_reject[1][0] -> CRITICAL[True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[2][1][Lanes] -> send_reject[1][2] -> CRITICAL[ll2][True][ll4][l] |
			receive_request[3][1][Lanes] -> send_reject[1][3] -> CRITICAL[ll2][ll3][True][l] 
		),
CLEANUP[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!ll2 && !ll3 && !ll4) restarting[1] -> STARTUP |
			when(ll2) send_permission[1][0] -> CLEANUP[False][ll3][ll4][l] |
			when(ll3) send_permission[1][2] -> CLEANUP[ll2][False][ll4][l] |
			when(ll4) send_permission[1][3] -> CLEANUP[ll2][ll3][False][l] |
			receive_request[0][1][Lanes] -> send_permission[1][0] -> CLEANUP[ll2][ll3][ll4][l] |  //put on LOWLIST
			receive_request[2][1][Lanes] -> send_permission[1][2] -> CLEANUP[ll2][ll3][ll4][l] |
			receive_request[3][1][Lanes] -> send_permission[1][3] -> CLEANUP[ll2][ll3][ll4][l] 
		).

WU_CAR_2 = STARTUP,

STARTUP = (choose_lane[2][l:Lanes] -> WAIT_RESPONSE[1][1][1][0][0][0][l] | //HILIST and LOWLIST
		   receive_request[0][2][Lanes] -> send_permission[2][0] -> STARTUP |
		   receive_request[1][2][Lanes] -> send_permission[2][1] -> STARTUP |
		   receive_request[3][2][Lanes] -> send_permission[2][3] -> STARTUP), 

WAIT_RESPONSE[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			receive_request[0][2][Lanes] -> send_reject[2][0] -> WAIT_RESPONSE[hl2][hl3][hl4][True][ll3][ll4][l] |
			receive_request[1][2][Lanes] -> send_reject[2][1] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][True][ll4][l] |
			receive_request[3][2][Lanes] -> if hl4 then (send_permission[2][3] -> WAIT_RESPONSE[hl2][hl3][True][ll2][ll3][ll4][l])
											else (send_reject[2][3] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][True][l]) |
			send_request[2][0][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[2][1][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[2][3][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[0][2] -> WAIT_RESPONSE[False][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[1][2] -> WAIT_RESPONSE[hl2][False][hl4][ll2][ll3][ll4][l] |
			receive_permission[3][2] -> WAIT_RESPONSE[hl2][hl3][False][ll2][ll3][ll4][l] |
			receive_reject[0][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[1][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[3][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |

			done_broadcast[2] -> WAIT_FOR_EVERYONE[hl2][hl3][hl4][ll2][ll3][ll4][l]
		),
WAIT_FOR_EVERYONE[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
	receive_request[0][2][Lanes] -> send_reject[2][0] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][True][ll2][ll3][l] |
	receive_request[1][2][Lanes] -> send_reject[2][1] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][True][ll3][l] |
	receive_request[3][2][Lanes] -> send_reject[2][3] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][ll2][True][l] |
	sync -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][ll3][l]
),
WAIT_PERMISSION[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!hl2 && !hl3 && !hl4) enter[2] -> CRITICAL[ll2][ll3][ll4][l] |
			when(hl2) receive_permission[0][2] -> WAIT_PERMISSION[False][hl3][hl4][ll2][ll3][ll4][l] |
			when(hl3) receive_permission[1][2] -> WAIT_PERMISSION[hl2][False][hl4][ll2][ll3][ll4][l] |
			when(hl4) receive_permission[3][2] -> WAIT_PERMISSION[hl2][hl3][False][ll2][ll3][ll4][l] |

			receive_request[0][2][Lanes] -> send_reject[2][0] -> WAIT_PERMISSION[hl2][hl3][hl4][True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][2][Lanes] -> send_reject[2][1] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][True][ll4][l] |
			receive_request[3][2][Lanes] -> send_reject[2][3] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][ll3][True][l] 
		),
CRITICAL[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
		 	exit[2] -> CLEANUP[ll2][ll3][ll4][l] |
			//go_slow[2] -> CRITICAL[ll2][ll3][ll4][l] |

			receive_request[0][2][Lanes] -> send_reject[2][0] -> CRITICAL[True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][2][Lanes] -> send_reject[2][1] -> CRITICAL[ll2][True][ll4][l] |
			receive_request[3][2][Lanes] -> send_reject[2][3] -> CRITICAL[ll2][ll3][True][l] 
		),
CLEANUP[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!ll2 && !ll3 && !ll4) restarting[2] -> STARTUP |
			when(ll2) send_permission[2][0] -> CLEANUP[False][ll3][ll4][l] |
			when(ll3) send_permission[2][1] -> CLEANUP[ll2][False][ll4][l] |
			when(ll4) send_permission[2][3] -> CLEANUP[ll2][ll3][False][l] |
			receive_request[0][2][Lanes] -> send_permission[2][0] -> CLEANUP[ll2][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][2][Lanes] -> send_permission[2][1] -> CLEANUP[ll2][ll3][ll4][l] |
			receive_request[3][2][Lanes] -> send_permission[2][3] -> CLEANUP[ll2][ll3][ll4][l] 
		).

WU_CAR_3 = STARTUP,

STARTUP = (choose_lane[3][l:Lanes] -> WAIT_RESPONSE[1][1][1][0][0][0][l] | //HILIST and LOWLIST
		   receive_request[0][3][Lanes] -> send_permission[3][0] -> STARTUP |
		   receive_request[1][3][Lanes] -> send_permission[3][1] -> STARTUP |
		   receive_request[2][3][Lanes] -> send_permission[3][2] -> STARTUP), 

WAIT_RESPONSE[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			receive_request[0][3][Lanes] -> send_reject[3][0] -> WAIT_RESPONSE[hl2][hl3][hl4][True][ll3][ll4][l] |
			receive_request[1][3][Lanes] -> send_reject[3][1] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][True][ll4][l] |
			receive_request[2][3][Lanes] -> send_reject[3][2] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][True][l] |
			send_request[3][0][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[3][1][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			send_request[3][2][l] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[0][3] -> WAIT_RESPONSE[False][hl3][hl4][ll2][ll3][ll4][l] |
			receive_permission[1][3] -> WAIT_RESPONSE[hl2][False][hl4][ll2][ll3][ll4][l] |
			receive_permission[2][3] -> WAIT_RESPONSE[hl2][hl3][False][ll2][ll3][ll4][l] |
			receive_reject[0][3] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[1][3] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |
			receive_reject[2][3] -> WAIT_RESPONSE[hl2][hl3][hl4][ll2][ll3][ll4][l] |

			done_broadcast[3] -> WAIT_FOR_EVERYONE[hl2][hl3][hl4][ll2][ll3][ll4][l]
		),
WAIT_FOR_EVERYONE[hl1:Bool][hl2:Bool][hl3:Bool][ll1:Bool][ll2:Bool][ll3:Bool][l:Lanes] = (
	receive_request[0][3][Lanes] -> send_reject[3][0] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][True][ll2][ll3][l] |
	receive_request[1][3][Lanes] -> send_reject[3][1] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][True][ll3][l] |
	receive_request[2][3][Lanes] -> send_reject[3][2] -> WAIT_FOR_EVERYONE[hl1][hl2][hl3][ll1][ll2][True][l] |
	sync -> WAIT_PERMISSION[hl1][hl2][hl3][ll1][ll2][ll3][l]
),
WAIT_PERMISSION[hl2:Bool][hl3:Bool][hl4:Bool][ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!hl2 && !hl3 && !hl4) enter[3] -> CRITICAL[ll2][ll3][ll4][l] |
			when(hl2) receive_permission[0][3] -> WAIT_PERMISSION[False][hl3][hl4][ll2][ll3][ll4][l] |
			when(hl3) receive_permission[1][3] -> WAIT_PERMISSION[hl2][False][hl4][ll2][ll3][ll4][l] |
			when(hl4) receive_permission[2][3] -> WAIT_PERMISSION[hl2][hl3][False][ll2][ll3][ll4][l] |

			receive_request[0][3][Lanes] -> send_reject[3][0] -> WAIT_PERMISSION[hl2][hl3][hl4][True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][3][Lanes] -> send_reject[3][1] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][True][ll4][l] |
			receive_request[2][3][Lanes] -> send_reject[3][2] -> WAIT_PERMISSION[hl2][hl3][hl4][ll2][ll3][True][l] 
		),
CRITICAL[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
		 	exit[3] -> CLEANUP[ll2][ll3][ll4][l] |
			//go_slow[3] -> CRITICAL[ll2][ll3][ll4][l] |

			receive_request[0][3][Lanes] -> send_reject[3][0] -> CRITICAL[True][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][3][Lanes] -> send_reject[3][1] -> CRITICAL[ll2][True][ll4][l] |
			receive_request[2][3][Lanes] -> send_reject[3][2] -> CRITICAL[ll2][ll3][True][l] 
		),
CLEANUP[ll2:Bool][ll3:Bool][ll4:Bool][l:Lanes] = (
			when(!ll2 && !ll3 && !ll4) restarting[3] -> STARTUP |
			when(ll2) send_permission[3][0] -> CLEANUP[False][ll3][ll4][l] |
			when(ll3) send_permission[3][1] -> CLEANUP[ll2][False][ll4][l] |
			when(ll4) send_permission[3][2] -> CLEANUP[ll2][ll3][False][l] |
			receive_request[0][3][Lanes] -> send_permission[3][0] -> CLEANUP[ll2][ll3][ll4][l] |  //put on LOWLIST
			receive_request[1][3][Lanes] -> send_permission[3][1] -> CLEANUP[ll2][ll3][ll4][l] |
			receive_request[2][3][Lanes] -> send_permission[3][2] -> CLEANUP[ll2][ll3][ll4][l] 
		).
			

||VMEI = (WU_CAR_0 || BROADCAST(0) || WU_CAR_1 || BROADCAST(1) || WU_CAR_2 || BROADCAST(2) || WU_CAR_3 || BROADCAST(3))
/{forall[i:Lanes]{forall[j:0..3]{forall[y:0..3]{receive_request[j][(j+y)%4][i]/send_request[j][(j+y)%4][i],
   receive_reject[j][y]/send_reject[j][y],
   receive_permission[j][y]/send_permission[j][y]}}}}.
 // << enter[4] could lock others out

assert MOVE_THROUGH = []<>exit[Cars]  //car 1 could get locked out

fluent CS[i:Cars] = <enter[i], exit[i]>

assert MUTEX = forall[i:1..3]forall[j:(i+1)..4][]!(CS[i] && CS[j])  //should not fail

